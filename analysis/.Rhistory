add_column(count = 1) %>%
arrange(value) %>%
pivot_wider(id_cols = c(rowname, age, is_mobile, is_eng,
treat, matched_bart, is_booked),
names_from = value,
values_from = count,
values_fill = list(count = 0),
values_fn = list(count = mean)) %>%
arrange(as.integer(rowname)) %>%
select(-rowname)
return(df_fin)
}
# one-hot encoding for balance metrics
book_bal <- one_hot_enc(book)
head(book_bal)
max(book_bal$FEMALE + book_bal$MALE + book_bal$OTHER)
max(book_bal$Chrome + book_bal$Firefox + book_bal$IE + book_bal$`Mobile Safari`)
max(book_bal$Chrome + book_bal$Firefox + book_bal$IE + book_bal$`Mobile Safari` + book_bal$OTHER)
max(book_bal$Chrome + book_bal$Firefox + book_bal$IE + book_bal$`Mobile Safari` + book_bal$Other)
bal_bart <- balance(book_bal,
treat = book$treat,
matched = book$matched_bart,
estimand = "ATT")
?balance
str(book_bal)
bal_bart <- balance(book_bal,
treat = book_bal$treat,
matched = book_bal$matched_bart,
estimand = "ATT")
bal_bart <- balance(book_bal,
treat = as.factor(book_bal$treat),
matched = book_bal$matched_bart,
estimand = "ATT")
bal_bart <- balance(book_bal,
treat = as.vector(book_bal$treat),
matched = book_bal$matched_bart,
estimand = "ATT")
bal_bart <- balance(book_bal,
treat = as.vector(book_bal$treat),
matched = as.vector(book_bal$matched_bart),
estimand = "ATT")
bal_bart <- balance(book_bal,
treat = as.matrix(book_bal$treat),
matched = as.matrix(book_bal$matched_bart),
estimand = "ATT")
bal_bart <- balance(as.matrix(book_bal),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book_bal$matched_bart),
estimand = "ATT")
bal_bart
# plot balance
plot(bal_bart)
bal_bart
bal_bart <- balance(as.matrix(book_bal %>% select(age, gender, browser_group,
is_mobile, is_eng)),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book_bal$matched_bart),
estimand = "ATT")
colnames(book_bal)
bal_bart <- balance(as.matrix(book_bal %>% select(-c(age, matched_bart, treat))),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book_bal$matched_bart),
estimand = "ATT")
# plot balance
plot(bal_bart)
bal_bart
# run initial logistic regression on restructured data
lr
# run initial logistic regression on restructured data
summary(lr_bart <- glm(is_booked ~ age + gender + treat +
is_mobile + browser_group + is_eng,
data = book,
family = binomial(link = "logit"),
weights = book$matched_bart))
# installs packages if needed
if(!requireNamespace("arm"))
install.packages("arm")
if(!requireNamespace("here"))
install.packages("here")
if(!requireNamespace("tidyverse"))
install.packages("tidyverse")
if(!requireNamespace("BART"))
install.packages("BART")
if(!requireNamespace("broom"))
install.packages("broom")
# increase memory limit for matching functions
# make sure this limit is compatible with the system used to run this code
memory.limit(3.2e10)
library(broom)
ls()
# number of control vars
cnt0 <- nrow(filter(book, treat == 0))
cnt0
# Apply Inverse Probability Treatment Weighting (IPTW)
# use the prop scores from BART model
# number of control vars
cnt0_bart <- nrow(filter(book, treat == 0))
# raw IPTW
book$weight_ip_bart <- if_else(book$treat == 0,
book$ps_bart / (1 - book$ps_bart),
1)
# normalize weights such that sum of weights for control = number of observed controls
weight_ip_sum_bart <- filter(book, treat == 0) %>% summarise(sum(weight_ip_bart))
book$weight_ip_bart_n <- if_else(book$treat == 0,
book$weight_ip_bart / weight_ip_sum_bart[[1]] * cnt0,
1)
# consider capping weights
summary(book$weight_ip_bart_n)
summary(book$weight_ip_bart)
book %>% filter(treat == 0) %>% summarise(sum(weight_ip_bart_n))
cnt0_bart
# run initial logistic regression on restructured data (BART)
summary(lr_bart <- glm(is_booked ~ age + gender + treat +
is_mobile + browser_group + is_eng,
data = book,
family = binomial(link = "logit"),
weights = book$matched_bart))
# run initial logistic regression on restructured data (BART IPTW)
summary(lr_bart_iptw <- glm(is_booked ~ age + gender + treat +
is_mobile + browser_group + is_eng,
data = book,
family = binomial(link = "logit"),
weights = book$weight_ip_bart_n))
?balance
# one-hot encoding for balance metrics
book_bal_iptw <- one_hot_enc(book)
# compute balance statistics
bal_bart_iptw <- balance(as.matrix(book_bal %>% select(-c(age, matched_bart, treat))),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book$weight_ip_bart_n),
estimand = "ATT")
# plot balance
plot(bal_bart_iptw)
bal_bart_iptw
class(bal_bart_iptw)
bal_bart_iptw
# one-hot encoding for balance metrics
book_bal <- one_hot_enc(book)
# compute balance statistics
bal_bart <- balance(as.matrix(book_bal %>% select(-c(matched_bart, treat))),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book_bal$matched_bart),
estimand = "ATT")
# plot balance
plot(bal_bart)
# one-hot encoding for balance metrics
book_bal_iptw <- one_hot_enc(book)
# compute balance statistics
bal_bart_iptw <- balance(as.matrix(book_bal %>% select(-c(matched_bart, treat))),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book$weight_ip_bart_n),
estimand = "ATT")
# plot balance
plot(bal_bart_iptw)
bal_bart
bal_bart_iptw
as.matrix(book_bal %>% select(-c(matched_bart, treat)
as.matrix(book_bal %>% select(-c(matched_bart, treat))
as.matrix(book_bal %>% select(-c(matched_bart, treat)))
as.matrix(book_bal %>% select(-c(matched_bart, treat)))
# run initial logistic regression on restructured data (BART)
summary(lr_bart <- glm(is_booked ~ age + gender + treat +
is_mobile + browser_group + is_eng,
data = book,
family = binomial(link = "logit"),
weights = book$matched_bart))
# run initial logistic regression on restructured data (BART IPTW)
summary(lr_bart_iptw <- glm(is_booked ~ age + gender + treat +
is_mobile + browser_group + is_eng,
data = book,
family = quasibinomial(link = "logit"),
weights = book$weight_ip_bart_n))
ls()
table(book$days_diff)
# installs packages if needed
if(!requireNamespace("arm"))
install.packages("arm")
if(!requireNamespace("here"))
install.packages("here")
if(!requireNamespace("tidyverse"))
install.packages("tidyverse")
if(!requireNamespace("BART"))
install.packages("BART")
if(!requireNamespace("broom"))
install.packages("broom")
# increase memory limit for matching functions
# make sure this limit is compatible with the system used to run this code
memory.limit(3.2e10)
library(arm)
library(BART) # Bayesian Additive Regression Trees
library(broom)
library(here)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=60), tidy=TRUE)
seed <- 14
set.seed(seed)
# load bookings data
book <- read_csv(here("data", "bookings_sample.csv"))
# see preliminary effects using logistic model
summary(lr <- glm(is_booked ~ age + gender + treat +
is_mobile + browser_group + is_eng,
data = book,
family = binomial(link = "logit")))
# get propensity scores
book$ps_lr <- predict(lr, type = "response")
tapply(book$ps_lr, book$is_booked, mean)
# define color palette for graphs
col.pal <- c("#999999", "#E69F00", "#56B4E9", "#777777")
# plot propensity scores
book %>%
ggplot(aes(x = ps_lr, fill = as.factor(is_booked))) +
geom_histogram(alpha = 0.5) +
labs(title = "Propensity Score Distribution: Logistic Regression") +
theme(legend.position = "bottom") +
scale_fill_manual(values = col.pal)
# convert variables for BART model
book$gender <- as.factor(book$gender)
book$first_device_type <- as.factor(book$first_device_type)
book$browser_group <- as.factor(book$browser_group)
# run BART on sample data due to computational time
bart_sample <- 1000
book_sample <- sample_n(book, bart_sample)
# get covariates for model
xtrain_bart <- as.data.frame(book_sample %>%
select(age, gender, treat, is_mobile,
browser_group, is_eng))
# run predictions on all data
xtest_bart <- as.data.frame(book %>%
select(age, gender, treat, is_mobile,
browser_group, is_eng))
# fit and predict
bart <- gbart(x.train = xtrain_bart,
y.train = book_sample$is_booked,
x.test = xtest_bart,
type = "lbart",
seed = seed,
mc.cores = 2)
# add prop scores on full dataset
book$ps_bart <- bart$prob.test.mean
# define color palette for graphs
col.pal <- c("#999999", "#E69F00", "#56B4E9", "#777777")
# average propensity scores for plot
bart_prop <- book %>%
group_by(is_booked) %>%
summarise(avg = mean(ps_bart))
# plot propensity scores
book %>%
ggplot(aes(x = ps_bart, fill = as.factor(is_booked))) +
geom_histogram(alpha = 0.5) +
geom_vline(data = bart_prop, aes(xintercept = avg,
colour = as.factor(is_booked))) +
labs(title = "Propensity Score Distribution: BART",
subtitle = "Vertical Lines: Average propensity scores") +
theme(legend.position = "bottom") +
scale_fill_manual(values = col.pal) +
scale_color_manual(values = col.pal)
# 1-1 neighbor matching
matched_bart <- matching(z = book$treat,
score = book$ps_bart,
replace = TRUE)$cnts
# add matched counts to df
book$matched_bart <- matched_bart
# inspect top 10 records used for matching
book %>%
arrange(desc(matched_bart)) %>%
select(age, gender, is_mobile, browser_group, is_eng, matched_bart) %>%
top_n(10, matched_bart)
# one hot encode categorical variables
one_hot_enc <- function(df) {
# to be updated: add parameter to choose columns to convert (and retain as is)
df_fin <- df %>%
rownames_to_column() %>%
pivot_longer(cols = c(gender, browser_group)) %>%
add_column(count = 1) %>%
arrange(value) %>%
pivot_wider(id_cols = c(rowname, age, is_mobile, is_eng,
treat, matched_bart, is_booked),
names_from = value,
values_from = count,
values_fill = list(count = 0),
values_fn = list(count = mean)) %>%
arrange(as.integer(rowname)) %>%
select(-rowname)
return(df_fin)
}
# one-hot encoding for balance metrics
book_bal <- one_hot_enc(book)
# compute balance statistics
bal_bart <- balance(as.matrix(book_bal %>% select(-c(matched_bart, treat))),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book_bal$matched_bart),
estimand = "ATT")
# plot balance
plot(bal_bart)
# Apply Inverse Probability Treatment Weighting (IPTW)
# use the prop scores from BART model
# number of control vars
cnt0_bart <- nrow(filter(book, treat == 0))
# raw IPTW
book$weight_ip_bart <- if_else(book$treat == 0,
book$ps_bart / (1 - book$ps_bart),
1)
# normalize weights such that sum of weights for control = number of observed controls
weight_ip_sum_bart <- filter(book, treat == 0) %>% summarise(sum(weight_ip_bart))
book$weight_ip_bart_n <- if_else(book$treat == 0,
book$weight_ip_bart / weight_ip_sum_bart[[1]] * cnt0,
1)
# Apply Inverse Probability Treatment Weighting (IPTW)
# use the prop scores from BART model
# number of control vars
cnt0_bart <- nrow(filter(book, treat == 0))
# raw IPTW
book$weight_ip_bart <- if_else(book$treat == 0,
book$ps_bart / (1 - book$ps_bart),
1)
# normalize weights such that sum of weights for control = number of observed controls
weight_ip_sum_bart <- filter(book, treat == 0) %>% summarise(sum(weight_ip_bart))
book$weight_ip_bart_n <- if_else(book$treat == 0,
book$weight_ip_bart / weight_ip_sum_bart[[1]] * cnt0_bart,
1)
# consider capping weights
# compute balance statistics
bal_bart_iptw <- balance(as.matrix(book_bal %>% select(-c(matched_bart, treat))),
treat = as.matrix(book_bal$treat),
matched = as.matrix(book$weight_ip_bart_n),
estimand = "ATT")
# plot balance
plot(bal_bart_iptw)
as.data.frame(bal_bart)
bal_bart
table(balance)
bal_bart$diff.means.raw
data.frame(bal_bart$diff.means.raw)
?bayesglm
hist(book$days_diff)
table(book$days_diff)
bal_bart$diff.means.matched
bal_bart_iptw$diff.means.matched
?balance
bal_bart_iptw$diff.means.matched
memory.limit()
head(book)
# balance statistics
bal_bart$diff.means.matched
bal_bart_iptw$diff.means.matched
class(bal_bart$diff.means.matched)
# define color palette for graphs
col.pal <- c("#999999", "#E69F00", "#56B4E9", "#777777")
# average propensity scores for plot
bart_prop <- book %>%
group_by(treat) %>%
summarise(avg = mean(ps_bart))
# plot propensity scores
book %>%
ggplot(aes(x = ps_bart, fill = as.factor(treat))) +
geom_histogram(alpha = 0.5) +
geom_vline(data = bart_prop, aes(xintercept = avg,
colour = as.factor(treat))) +
labs(title = "Propensity Score Distribution: BART",
subtitle = "Vertical Lines: Average propensity scores") +
theme(legend.position = "bottom") +
scale_fill_manual(values = col.pal) +
scale_color_manual(values = col.pal)
summary(book$ps_bart, book$treat, summary)
tapply(book$ps_bart, book$treat, summary)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(rpart)
library(ranger)
library(MatchIt)
library(optmatch)
library(Hmisc)
library(survey)
library(arm)
library(gbm)
library(BART)
library(correlationfunnel)
library(conflicted)
theme_set(theme_bw())
# increase memory limit for matching functions
# make sure this limit is compatible with the system used to run this code
memory.limit(3.2e10)
# read in data
dat <- read_csv(here::here('data', 'bookings_sample.csv'))
# convert categorical variables
dat <- dat %>% mutate_at(vars(c("gender","browser_group")),as.factor)
fit.lr <- glm(treat~is_eng+is_mobile+age+gender+browser_group,family=binomial,data=dat)
dat$pscores.lr <- predict(fit.lr,type='response')
ggplot(dat) +
geom_histogram(aes(pscores.lr,col=factor(treat)),alpha=0) +
scale_color_manual(
name='Group',
labels=c('control','treatment'),
values=c('blue','red')
)
## one-to-one nearest neighbor w/ replacement
matches.lr <- matching(z=dat$treat,score=dat$pscores.lr,replace=T)
weight.lr <- ifelse(dat$treat==0,matches.lr$cnts,1)
## IPTW
IPTW.lr <- dat %>%
transmute(IPTW=ifelse(treat==1,1,pscores.lr/(1-pscores.lr))) %>%
unlist() %>%
unname()
fit.prob <- glm(treat~is_eng+is_mobile+age+gender+browser_group,family=binomial(link='probit'),data=dat)
dat$pscores.prob <- predict(fit.prob,type='response')
ggplot(dat) +
geom_histogram(aes(pscores.prob,col=factor(treat)),alpha=0) +
scale_color_manual(
name='Group',
labels=c('control','treatment'),
values=c('blue','red')
)
## one-to-one nearest neighbor w/ replacement
matches.prob <- matching(z=dat$treat,score=dat$pscores.prob,replace=T)
knitr::opts_chunk$set(echo = TRUE)
#library(dplyr)
library(here)
library(tidyverse)
#library(ggplot2)
library(lubridate)
library(rpart)
library(ranger)
library(MatchIt)
library(optmatch)
library(Hmisc)
library(survey)
library(arm)
library(gbm)
library(BART)
library(correlationfunnel)
#library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("filter", "dplyr")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
knitr::opts_chunk$set(echo = TRUE)
#library(dplyr)
library(here)
library(tidyverse)
#library(ggplot2)
library(lubridate)
library(rpart)
library(ranger)
library(MatchIt)
library(optmatch)
library(Hmisc)
library(survey)
library(arm)
library(gbm)
library(BART)
library(correlationfunnel)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
theme_set(theme_bw())
# increase memory limit for matching functions
# make sure this limit is compatible with the system used to run this code
memory.limit(3.2e10)
# read in data
dat <- read_csv(here::here('data', 'bookings_sample.csv'))
# convert categorical variables
dat <- dat %>% mutate_at(vars(c("gender","browser_group")),as.factor)
fit.lr <- glm(treat~is_eng+is_mobile+age+gender+browser_group,family=binomial,data=dat)
dat$pscores.lr <- predict(fit.lr,type='response')
ggplot(dat) +
geom_histogram(aes(pscores.lr,col=factor(treat)),alpha=0) +
scale_color_manual(
name='Group',
labels=c('control','treatment'),
values=c('blue','red')
)
## one-to-one nearest neighbor w/ replacement
matches.lr <- matching(z=dat$treat,score=dat$pscores.lr,replace=T)
weight.lr <- ifelse(dat$treat==0,matches.lr$cnts,1)
## IPTW
IPTW.lr <- dat %>%
transmute(IPTW=ifelse(treat==1,1,pscores.lr/(1-pscores.lr))) %>%
unlist() %>%
unname()
fit.prob <- glm(treat~is_eng+is_mobile+age+gender+browser_group,family=binomial(link='probit'),data=dat)
dat$pscores.prob <- predict(fit.prob,type='response')
ggplot(dat) +
geom_histogram(aes(pscores.prob,col=factor(treat)),alpha=0) +
scale_color_manual(
name='Group',
labels=c('control','treatment'),
values=c('blue','red')
)
## one-to-one nearest neighbor w/ replacement
matches.prob <- matching(z=dat$treat,score=dat$pscores.prob,replace=T)
weight.prob <- ifelse(dat$treat==0,matches.prob$cnts,1)
## IPTW
IPTW.prob <- dat %>%
transmute(IPTW=ifelse(treat==1,1,pscores.prob/(1-pscores.prob))) %>%
unlist() %>%
unname()
fit.cart <- rpart(treat~is_eng+is_mobile+age+gender+browser_group,data=dat,method='class') # fit a CART model
dat$pscores.cart <- predict(fit.cart,type='prob')[,2] # take probability of assigned=1 as propensity scores
ggplot(dat) +
geom_histogram(aes(pscores.cart,col=factor(treat)),alpha=0) +
scale_color_manual(
name='Group',
labels=c('control','treatment'),
values=c('blue','red')
)
## one-to-one nearest neighbor w/ replacement
matches.cart <- matching(z=dat$treat,score=dat$pscores.cart,replace=T)
